/*
 * sbcl_librarian_err.h
 *
 * This header declares variables needed by the fatal error handling
 * facility as well as error codes representing the result of calling
 * into Lisp. Platform-specific configuration for setjmp/longjmp is
 * also included to account for variance across C runtimes and
 * compilers.
 *
 * This header is automatically included by C bindings generated by
 * SBCL-LIBRARIAN.
 *
 */
#pragma once
#include <stdio.h>

#ifdef LIBSBCL_LIBRARIAN_API_BUILD
# ifdef _WIN32
#  define LIBSBCL_LIBRARIAN_ERR_API __declspec(dllexport)
# elif defined(__ELF__)
#  define LIBSBCL_LIBRARIAN_ERR_API __attribute__ ((visibility ("default")))
# else
#  define LIBSBCL_LIBRARIAN_ERR_API
# endif
#else
# ifdef _WIN32
#  define LIBSBCL_LIBRARIAN_ERR_API __declspec(dllimport)
# else
#  define LIBSBCL_LIBRARIAN_ERR_API
# endif
#endif

#ifdef _WIN32
# include <stdint.h>

/*
 * We use __builtin_longjmp on Windows because, unlike the longjmp
 * provided by the UCRT, it does not perform stack unwinding, which
 * does not work with Lisp stack frames.
 */
# ifdef __clang__
/*
 * Clang's __builtin_{set,long}jmp are compatibile with the GCC
 * equivalents[^1]. However, Clang types the jmp_buf arguments to
 * these builtins as `(void **)` instead of `intptr[5]`[^2], so we add
 * a macro to conditionally insert the cast.
 *
 * [^1]: https://github.com/llvm/llvm-project/blob/ceade83ad5fc529f2b2beb896eec0dd0b29fdd44/llvm/docs/ExceptionHandling.rst#id32
 * [^2]: https://github.com/llvm/llvm-project/blob/ceade83ad5fc529f2b2beb896eec0dd0b29fdd44/clang/include/clang/Basic/Builtins.td#L897
 */
#  define longjmp(env, status)  __builtin_longjmp((void **) env, status)
#  define setjmp(env) __builtin_setjmp((void **) env)
# else
#  define longjmp(env, status) __builtin_longjmp(env, status)
#  define setjmp(env)  __builtin_setjmp(env)
# endif

/*
 * __builtin_setjmp and __builtin_longjmp use a jump buffer of type
 * intptr_t[5] instead of jmp_buf (see
 * https://gcc.gnu.org/onlinedocs/gcc/Nonlocal-Gotos.html).
 *
 * Also, you cannot declare a variable as both __thread and
 * __declspec(dllexport) on Windows, so we export a thunk to get the
 * thread-local variable instead.
 */
extern __thread intptr_t _fatal_lisp_error_handler[5];
extern LIBSBCL_LIBRARIAN_ERR_API intptr_t *fatal_lisp_error_handler(void);
#else
# include <setjmp.h>

extern __thread LIBSBCL_LIBRARIAN_ERR_API jmp_buf fatal_lisp_error_handler;
#endif

extern int LIBSBCL_LIBRARIAN_ERR_API fatal_sbcl_error_occurred;
extern void ldb_monitor(void);

typedef enum {
    LISP_ERR_SUCCESS = 0,
    LISP_ERR_FAILURE = 1,
    LISP_ERR_BUG = 2,
    LISP_ERR_FATAL = 3
} lisp_err_t;
